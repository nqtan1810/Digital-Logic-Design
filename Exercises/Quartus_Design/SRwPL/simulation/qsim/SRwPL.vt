// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2023 16:42:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TOP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TOP_vlg_sample_tst(
	CLK,
	E,
	I,
	IL,
	IR,
	S,
	sampler_tx
);
input  CLK;
input  E;
input [7:0] I;
input  IL;
input  IR;
input [1:0] S;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or E or I or IL or IR or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TOP_vlg_check_tst (
	Q,
	sampler_rx
);
input [7:0] Q;
input sampler_rx;

reg [7:0] Q_expected;

reg [7:0] Q_prev;

reg [7:0] Q_expected_prev;

reg [7:0] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
end


// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// generate trigger
always @(Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q = %b | ",Q_expected_prev);
	$display("| real Q = %b | ",Q_prev);
`endif
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TOP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg E;
reg [7:0] I;
reg IL;
reg IR;
reg [1:0] S;
// wires                                               
wire [7:0] Q;

wire sampler;                             

// assign statements (if any)                          
TOP i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.E(E),
	.I(I),
	.IL(IL),
	.IR(IR),
	.Q(Q),
	.S(S)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500000 1'b1;
	#2500000;
end 

// E
initial
begin
	E = 1'b0;
	E = #5000000 1'b1;
end 
// S[ 1 ]
initial
begin
	repeat(2)
	begin
		S[1] = 1'b0;
		S[1] = #20000000 1'b1;
		# 20000000;
	end
	S[1] = 1'b0;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #10000000 1'b1;
	#10000000;
end 

// IL
initial
begin
	IL = 1'b0;
end 

// IR
initial
begin
	IR = 1'b0;
end 
// I[ 7 ]
initial
begin
	I[7] = 1'b0;
	I[7] = #40000000 1'b1;
	I[7] = #40000000 1'b0;
end 
// I[ 6 ]
initial
begin
	I[6] = 1'b0;
	I[6] = #30000000 1'b1;
	I[6] = #30000000 1'b0;
	I[6] = #30000000 1'b1;
end 
// I[ 5 ]
initial
begin
	I[5] = 1'b0;
	I[5] = #20000000 1'b1;
	I[5] = #20000000 1'b0;
	I[5] = #20000000 1'b1;
	I[5] = #20000000 1'b0;
end 
// I[ 4 ]
initial
begin
	I[4] = 1'b1;
	I[4] = #40000000 1'b0;
	I[4] = #40000000 1'b1;
end 
// I[ 3 ]
always
begin
	I[3] = 1'b0;
	I[3] = #10000000 1'b1;
	#10000000;
end 
// I[ 2 ]
initial
begin
	repeat(2)
	begin
		I[2] = 1'b0;
		I[2] = #20000000 1'b1;
		# 20000000;
	end
	I[2] = 1'b0;
end 
// I[ 1 ]
initial
begin
	I[1] = 1'b0;
	I[1] = #40000000 1'b1;
	I[1] = #40000000 1'b0;
end 
// I[ 0 ]
initial
begin
	I[0] = 1'b0;
	I[0] = #30000000 1'b1;
	I[0] = #30000000 1'b0;
	I[0] = #30000000 1'b1;
end 

TOP_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.E(E),
	.I(I),
	.IL(IL),
	.IR(IR),
	.S(S),
	.sampler_tx(sampler)
);

TOP_vlg_check_tst tb_out(
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule

